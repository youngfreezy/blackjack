// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.Game = (function(superClass) {
  extend(Game, superClass);

  function Game() {
    return Game.__super__.constructor.apply(this, arguments);
  }

  Game.prototype.initialize = function() {
    var deck;
    this.set('deck', deck = new Deck());
    this.set('playerHand', deck.dealPlayer());
    this.set('dealerHand', deck.dealDealer());
    this.get('playerHand').on('bust', (function(_this) {
      return function() {
        return _this.trigger('dealerWin');
      };
    })(this));
    this.get('playerHand').on('stand', (function(_this) {
      return function() {
        return _this.get('dealerHand').playToWin();
      };
    })(this));
    this.get('dealerHand').on('bust', (function(_this) {
      return function() {
        return _this.trigger('playerWin');
      };
    })(this));
    return this.get('dealerHand').on('stand', (function(_this) {
      return function() {
        return _this.trigger(_this.decideWinner());
      };
    })(this));
  };

  Game.prototype.decideWinner = function() {
    if (this.get('playerHand').maxScore() > this.get('dealerHand').maxScore()) {
      return 'playerWin';
    } else if (this.get('playerHand').maxScore() < this.get('dealerHand').maxScore()) {
      return 'dealerWin';
    } else {
      return 'push';
    }
  };

  return Game;

})(Backbone.Model);
